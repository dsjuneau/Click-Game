{"version":3,"sources":["components/Header.js","components/Banner.js","components/Images.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","feedback","score","topScore","Banner","Images","imgArry","images","map","image","height","src","img","key","id","onClick","handleClick","alt","Footer","App","state","isClicked","randomize","arry","_this","i","length","j","Math","floor","random","temp","setState","idx","console","log","forEach","prevState","parseInt","this","components_Header","components_Banner","components_Images","components_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac47e051.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className=\"py-5 container-fluid bg-dark text-white-50 sticky-top\">\r\n      <div className=\"row\">\r\n        <div className=\"text-center font-weight-bold h1 col-3\">Clicky Game</div>\r\n        <div className=\"text-center font-weight-light h2 col-4\">\r\n          {props.feedback}\r\n        </div>\r\n        <div className=\"text-center font-weight-bold h1 col-2\">\r\n          Score: {props.score}\r\n        </div>\r\n        <div className=\"text-center font-weight-bold h1 col-3\">\r\n          Top Score: {props.topScore}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Banner() {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4\">Rules</h1>\r\n        <p className=\"lead\">1. Try to click on each image only once.</p>\r\n        <p className=\"lead\">2. After each click, the images will reposition.</p>\r\n        <p className=\"lead\">\r\n          3. If you click on same image a second time, game over.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React from \"react\";\r\nimport \"./Image.css\";\r\n\r\nfunction Images(props) {\r\n  const imgArry = props.images.map(image => (\r\n    <img\r\n      className=\"col-2 m-4\"\r\n      height=\"200px\"\r\n      src={image.img}\r\n      key={image.id}\r\n      onClick={() => props.handleClick(image.id)}\r\n      alt=\"\"\r\n    />\r\n  ));\r\n\r\n  return <div className=\"container d-flex flex-wrap\">{imgArry}</div>;\r\n}\r\n\r\nexport default Images;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"pt-5 pb-1 container-fluid bg-dark text-white-50\">\r\n      <p>Clicky Game!</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Banner from \"./components/Banner\";\nimport Images from \"./components/Images\";\nimport Footer from \"./components/Footer\";\n\nclass App extends React.Component {\n  state = {\n    feedback: \"\",\n    score: \"0\",\n    topScore: \"0\",\n    images: [\n      { id: \"0\", img: \"./imgs/kyle1.jpg\", isClicked: false },\n      { id: \"1\", img: \"./imgs/kyle2.jpg\", isClicked: false },\n      { id: \"2\", img: \"./imgs/kyle3.jpg\", isClicked: false },\n      { id: \"3\", img: \"./imgs/kyle4.jpg\", isClicked: false },\n      { id: \"4\", img: \"./imgs/kyle5.jpg\", isClicked: false },\n      { id: \"5\", img: \"./imgs/kyle6.jpg\", isClicked: false },\n      { id: \"6\", img: \"./imgs/kyle7.jpg\", isClicked: false },\n      { id: \"7\", img: \"./imgs/kyle8.jpg\", isClicked: false },\n      { id: \"8\", img: \"./imgs/kyle9.jpg\", isClicked: false },\n      { id: \"9\", img: \"./imgs/kyle10.jpg\", isClicked: false },\n      { id: \"10\", img: \"./imgs/kyle11.jpg\", isClicked: false },\n      { id: \"11\", img: \"./imgs/kyle12.jpg\", isClicked: false }\n    ]\n  };\n\n  componentDidMount() {\n    this.randomize();\n  }\n\n  randomize = () => {\n    let arry = this.state.images;\n    for (var i = arry.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = {\n        id: arry[i].id,\n        img: arry[i].img,\n        isClicked: arry[i].isClicked\n      };\n      arry[i] = {\n        id: arry[j].id,\n        img: arry[j].img,\n        isClicked: arry[j].isClicked\n      };\n      arry[j] = temp;\n    }\n    this.setState({ images: arry });\n  };\n  handleClick = idx => {\n    console.log(idx);\n    this.state.images.forEach(image => {\n      if (image.id === idx) {\n        if (image.isClicked) {\n          this.setState({ score: \"0\" });\n          this.setState({ feedback: \"You don't know js\" });\n          this.setState(prevState => {\n            return {\n              images: prevState.images.map(image => {\n                image.isClicked = false;\n                return image;\n              })\n            };\n          });\n          this.randomize();\n        } else {\n          this.setState({ score: parseInt(this.state.score) + 1 });\n          if (this.state.score === this.state.topScore) {\n            this.setState({ topScore: parseInt(this.state.topScore) + 1 });\n          }\n          this.setState({ feedback: \"Kyle is happy!\" });\n          this.setState(prevState => {\n            return {\n              images: prevState.images.map(image => {\n                if (image.id === idx) {\n                  image.isClicked = true;\n                }\n                return image;\n              })\n            };\n          });\n\n          console.log(\"update state\");\n          this.randomize();\n        }\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Header\n          score={this.state.score}\n          topScore={this.state.topScore}\n          feedback={this.state.feedback}\n        />\n        <Banner />\n        <Images images={this.state.images} handleClick={this.handleClick} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}